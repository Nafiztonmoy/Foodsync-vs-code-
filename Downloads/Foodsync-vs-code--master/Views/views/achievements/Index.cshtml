@model IEnumerable<FoodWeb.Models.Achievement>
@{
    ViewBag.Title = "Achievements";
    var userAchievements = ViewBag.UserAchievements as Dictionary<int, FoodWeb.Models.UserAchievement> ?? new Dictionary<int, FoodWeb.Models.UserAchievement>();
}

<div class="container mt-4">
    <h2>Achievements</h2>
    <p>Complete challenges and tasks to unlock achievements and earn reward points!</p>

    <div class="row">
        @foreach (var achievement in Model)
        {
            var userAchievement = userAchievements.ContainsKey(achievement.Id) ? userAchievements[achievement.Id] : null;
            var isUnlocked = userAchievement != null && userAchievement.IsUnlocked;
            var progress = userAchievement != null ? userAchievement.Progress : 0;
            var progressPercentage = 0.0;

            if (userAchievement != null && !isUnlocked)
            {
                switch (achievement.AchievementType)
                {
                    case "PURCHASE":
                        progressPercentage = achievement.RequiredQuantity.HasValue ?
                            (double)progress / achievement.RequiredQuantity.Value * 100 : 0;
                        break;
                    case "SPENDING_AMOUNT":
                        progressPercentage = achievement.RequiredAmount.HasValue ?
                            (double)progress / (double)achievement.RequiredAmount.Value * 100 : 0;
                        break;
                    case "CHALLENGE_COMPLETION":
                        progressPercentage = achievement.RequiredChallenges.HasValue ?
                            (double)progress / achievement.RequiredChallenges.Value * 100 : 0;
                        break;
                    case "CHALLENGE_JOIN":
                        progressPercentage = achievement.RequiredQuantity.HasValue ?
                            (double)progress / achievement.RequiredQuantity.Value * 100 : 0;
                        break;
                }
            }
            else if (isUnlocked)
            {
                progressPercentage = 100;
            }

            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100 achievement-card @(isUnlocked ? "unlocked" : "locked")">
                    <div class="card-header">
                        <h5 class="card-title">
                            @if (isUnlocked)
                            {
                                <i class="fas fa-trophy text-warning"></i>
                            }
                            else
                            {
                                <i class="fas fa-lock"></i>
                            }
                            @achievement.Title
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="text-center mb-3">
                            @if (!string.IsNullOrEmpty(achievement.BadgeIcon))
                            {
                                <i class="@achievement.BadgeIcon fa-3x @(isUnlocked ? "text-warning" : "text-muted")"></i>
                            }
                            else
                            {
                                <i class="fas fa-trophy fa-3x @(isUnlocked ? "text-warning" : "text-muted")"></i>
                            }
                        </div>

                        <p class="card-text">@achievement.Description</p>

                        <div class="achievement-progress">
                            @if (isUnlocked)
                            {
                                <div class="alert alert-success">
                                    <i class="fas fa-check-circle"></i> Unlocked on
                                    @userAchievement.UnlockedAt.Value.ToString("MMM dd, yyyy")
                                </div>
                            }
                            else
                            {
                                <div class="progress mb-2">
                                    <div class="progress-bar" role="progressbar"
                                         style="width: @progressPercentage%;"
                                         aria-valuenow="@progressPercentage"
                                         aria-valuemin="0"
                                         aria-valuemax="100">
                                        @Math.Round(progressPercentage)%
                                    </div>
                                </div>
                                <p class="small text-center">
                                    @GetRequirementText(achievement, progress)
                                </p>
                            }
                        </div>
                    </div>
                    <div class="card-footer">
                        <span class="badge bg-primary">@achievement.RewardPoints points</span>

                        @if (isUnlocked)
                        {
                            <span class="badge bg-success float-end">Unlocked</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary float-end">Locked</span>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="mt-4 text-center">
        <a href="@Url.Action("Leaderboard")" class="btn btn-outline-primary">
            <i class="fas fa-trophy"></i> View Leaderboard
        </a>
        <a href="@Url.Action("MyAchievements")" class="btn btn-primary">
            <i class="fas fa-user"></i> View My Achievements
        </a>
    </div>
</div>

@functions {
    public string GetRequirementText(FoodWeb.Models.Achievement achievement, int progress)
    {
        switch (achievement.AchievementType)
        {
            case "PURCHASE":
                var productText = string.IsNullOrEmpty(achievement.RequiredProduct) ? "items" : achievement.RequiredProduct;
                return $"{progress} / {achievement.RequiredQuantity} {productText} purchased";
            case "SPENDING_AMOUNT":
                return $"${progress} / ${achievement.RequiredAmount} spent";
            case "CHALLENGE_COMPLETION":
                return $"{progress} / {achievement.RequiredChallenges} challenges completed";
            case "CHALLENGE_JOIN":
                return $"{progress} / {achievement.RequiredQuantity} challenges joined";
            default:
                return "Unknown requirement";
        }
    }
}

<style>
    .achievement-card.unlocked {
        border-left: 4px solid #28a745;
    }

    .achievement-card.locked {
        opacity: 0.8;
        border-left: 4px solid #6c757d;
    }

    .achievement-card .progress {
        height: 10px;
    }
</style>